// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  sub           String
  role          String      @default("user")
  workPhone     String?
  phone         String?
  firstName     String
  secondName    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  POUOnUser     POUOnUser[]
  initiatorIn   Project[]   @relation("initiator")
  headIn        Project[]   @relation("head")
  coordinatorIn Project[]   @relation("coordinator")
  Offer         Offer[]
  Event         Event[]
  Template      Template[]
  Document      Document[]

  @@index([sub])
}

model POU {
  id            Int         @id @default(autoincrement())
  name          String
  OPF           String
  code          Int
  district      String
  createdAt     DateTime    @default(now())
  POUOnUser     POUOnUser[]
  unitPOU       Project[]   @relation("unitPOU")
  recipientPOU  Project[]   @relation("recipientPOU")
  eneficiaryPOU Project[]   @relation("eneficiaryPOU")
  performerPOU  Project[]   @relation("performerPOU")
  Offer         Offer[]
  Document      Document[]
}

model POUOnUser {
  id       Int    @id @default(autoincrement())
  POU      POU    @relation(fields: [pOUId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  position String
  pOUId    Int
  userId   Int
}

model Project {
  id              Int       @id @default(autoincrement())
  number          Int?
  name            String
  budget          Int?
  currency        Currency? @relation(fields: [currencyId], references: [id])
  start           DateTime?
  end             DateTime?
  donor           Donor?    @relation(fields: [donorId], references: [id])
  unitPOU         POU?      @relation("unitPOU", fields: [unitPOUId], references: [id])
  recipientPOU    POU?      @relation("recipientPOU", fields: [recipientPOUId], references: [id])
  eneficiaryPOU   POU?      @relation("eneficiaryPOU", fields: [eneficiaryPOUId], references: [id])
  performerPOU    POU?      @relation("performerPOU", fields: [performerPOUId], references: [id])
  goal            String
  sector          Sector?   @relation(fields: [sectorId], references: [id])
  isPublic        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  //тут треба забрати знак питання
  initiator       User?     @relation("initiator", fields: [initiatorId], references: [id])
  head            User?     @relation("head", fields: [headId], references: [id])
  coordinator     User?     @relation("coordinator", fields: [coordinatorId], references: [id])
  photoId         Int?
  currencyId      Int?
  donorId         Int?
  unitPOUId       Int?
  recipientPOUId  Int?
  eneficiaryPOUId Int?
  performerPOUId  Int?
  sectorId        Int?
  initiatorId     Int?
  headId          Int?
  coordinatorId   Int?
  Offer           Offer[]
  Event           Event[]

  @@index([number])
}

model Currency {
  id      Int       @id @default(autoincrement())
  name    String
  ticker  String
  Project Project[]
}

model Donor {
  id      Int       @id @default(autoincrement())
  name    String
  Project Project[]
}

model Sector {
  id      Int       @id @default(autoincrement())
  name    String
  Project Project[]
}

model Offer {
  id          Int      @id @default(autoincrement())
  description String
  category    String
  type        String
  createdAt   DateTime @default(now())
  isPublic    Boolean  @default(false)
  POU         POU?     @relation(fields: [pOUId], references: [id])
  pOUId       Int?
  project     Project  @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  contractId  Int
  projectId   Int
}

model Event {
  id             Int      @id @default(autoincrement())
  name           String
  date           DateTime
  district       String
  type           String
  direction      String
  specialization String
  createdAt      DateTime @default(now())
  isPublic       Boolean  @default(false)
  user           User     @relation(fields: [userId], references: [id])
  project        Project? @relation(fields: [projectId], references: [id])
  photoId        Int?
  userId         Int
  projectId      Int?
}

model Contract {
  id         Int @id @default(autoincrement())
  templateId Int
}

model Template {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  isPublic    Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  documents   Document[]
}

model Document {
  id                          Int      @id @default(autoincrement())
  name                        String
  calculationPeriod           String
  OPF                         String
  organizationalStructureType String
  templates                   Template @relation(fields: [templateId], references: [id])
  POU                         POU?     @relation(fields: [pOUId], references: [id])
  user                        User     @relation(fields: [userId], references: [id])
  pOUId                       Int?
  templateId                  Int
  userId                      Int
}
